<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gitai.me</title>
    <link>https://gitai.me/</link>
    <description>Recent content on Gitai.me</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans-CN</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://github.com/GitaiQAQ&#34;&gt;Gitai&lt;/a&gt; 2011</copyright>
    <lastBuildDate>Mon, 16 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://gitai.me/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>WIP: 另一种前后端同构</title>
      <link>https://gitai.me/2020/11/actor-model-as-bus/</link>
      <pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2020/11/actor-model-as-bus/</guid>
      <description>一般来说的前后端同构都是指用 React 之类的支持 SSR 的框架做服务端预渲染，然后直接混入进行 render 的一种提升用户体验的方式。 实际上在服务端本身就存在同构这种</description>
    </item>
    
    <item>
      <title>前端中的欧·亨利式笔法</title>
      <link>https://gitai.me/2020/03/jiandaoyun/</link>
      <pubDate>Sat, 21 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2020/03/jiandaoyun/</guid>
      <description>简道云是帆软旗下的一个表单 SaaS，几年前调研自定义表单的时候发现的，在此之前还没人把 BaaS 和表单融合在一起；虽然基础原理简单，如果想实现 Demo 的话</description>
    </item>
    
    <item>
      <title>激光测距 Adafruit VL53L0X</title>
      <link>https://gitai.me/2020/03/vl53l0x/</link>
      <pubDate>Mon, 16 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2020/03/vl53l0x/</guid>
      <description>VL53L0X飞行时间测距传感器是ST第二代激光测距模块，采用市场尺寸最小的一种封装。VL53LOX是完全集成的传感器，配有嵌入式红外、人眼</description>
    </item>
    
    <item>
      <title>WIP: 安全的 IO 隔离</title>
      <link>https://gitai.me/2020/01/access-of-sandbox/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2020/01/access-of-sandbox/</guid>
      <description>前一篇写了安全的 JavaScript 沙盘的分析，但是遗留了 IO 这个大问题，和内核调用会受到 ACL 的控制一样；我们平时瞎写的 JS 脚本中，总是缺少不了 fs, net 这些 IO 库的使用，</description>
    </item>
    
    <item>
      <title>NodeJS 沙盒技术一览</title>
      <link>https://gitai.me/2019/12/sandbox-of-nodejs/</link>
      <pubDate>Mon, 30 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2019/12/sandbox-of-nodejs/</guid>
      <description>Module Secure Memory Limits Isolated Multithreaded Module Support Inspector Support vm ✅ ✅ worker_threads ✅ ✅ ✅ vm2 ✅ ✅ ✅ napajs ✅ ✅ Partial webworker-threads ✅ ✅ tiny-worker ✅ ✅ isolated-vm ✅ ✅ ✅ ✅ ✅ Secure: Safely run untrusted code Memory Limits: Possible to set memory limits / safe against heap overflow DoS attacks Isolated: Is garbage collection, heap, etc isolated from application Multithreaded: Run code on many</description>
    </item>
    
    <item>
      <title>从高级语言到基本电路</title>
      <link>https://gitai.me/2019/09/program-to-hardcode/</link>
      <pubDate>Fri, 20 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2019/09/program-to-hardcode/</guid>
      <description>计算机的可编程性主要是指对中央处理器的编程。通过预设的指令集，和储存设备记录的指令序列，实现可编程性。 本文广泛借鉴了 《大话处理器处理器基础知</description>
    </item>
    
    <item>
      <title>简单的搜索框</title>
      <link>https://gitai.me/2019/09/searchbox/</link>
      <pubDate>Fri, 13 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2019/09/searchbox/</guid>
      <description>首先这几年各家都喜欢弄自己的 DSL（domain-specific language），尤其在大数据这块蛋糕上。 比如： SQL-on-Hadoop: 查询分析是大数据要解决</description>
    </item>
    
    <item>
      <title>按需加载和自定义 require</title>
      <link>https://gitai.me/2019/08/webpack-loadable/</link>
      <pubDate>Wed, 07 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2019/08/webpack-loadable/</guid>
      <description>Webpack 都写了那么多篇了，发现还有一些东西没写，所以这里补一篇。关于 Webpack 的按需加载，以及和他没啥关系的自定义 require 过程。 按需加载 先说按需加载，Webpa</description>
    </item>
    
    <item>
      <title>HTMLWebpackPlugin 增加新模板会遇到的坑</title>
      <link>https://gitai.me/2019/07/webpack-html-plugin/</link>
      <pubDate>Thu, 25 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2019/07/webpack-html-plugin/</guid>
      <description>想用 Webpack 作为静态站点生成器，其优点不必多说，生态好。举个例子 多种多样的模板引擎，互相嵌套 JS/CSS 的各种预处理 资源文件的统一化？无论远程还是本地资源，</description>
    </item>
    
    <item>
      <title>Webpack 动态 import 实现原理 —— 附：蹭个 PR</title>
      <link>https://gitai.me/2019/07/webpack-lazyload/</link>
      <pubDate>Sat, 13 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2019/07/webpack-lazyload/</guid>
      <description>本文主要因为以下这段代码并不符合预期，chunk 名字，没有生效 // @ts-ignore import( /* webpackChunkName: &amp;#34;[request]&amp;#34; */ &amp;#34;../docs/parcel.md&amp;#34; ).then( ({ default: html }) =&amp;gt; {} ); 但是下面这样就可以生效了 let parcel = &amp;#34;parcel&amp;#34;; import( /* webpackChunkName: &amp;#34;[request]&amp;#34; */ &amp;#34;../docs/&amp;#34; +</description>
    </item>
    
    <item>
      <title>又一个前端打包工具 - parcel</title>
      <link>https://gitai.me/2019/07/parcel/</link>
      <pubDate>Sat, 13 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2019/07/parcel/</guid>
      <description>这是我在找 Webpack 自动配置生成 时，发现的彩蛋？ 既然别人把他们放在一起，估计挺好用的？你看 rollup, brunch 就没放上去 点开说明文档，此处划重点 “利用多核处理提供极</description>
    </item>
    
    <item>
      <title>饥荒联机版局域网无法连接的问题？</title>
      <link>https://gitai.me/2019/06/manually-connect-donotstarvetogether/</link>
      <pubDate>Sat, 22 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2019/06/manually-connect-donotstarvetogether/</guid>
      <description>当年饥荒还没出中文版，WeGame 也没出现的时候，给饥荒转了正；但是之后在也没碰过，所以大概上次玩已经是高二的时候，以及之后多买的联机版也一</description>
    </item>
    
    <item>
      <title>前端打包常见工具 - rollup</title>
      <link>https://gitai.me/2019/06/rollup/</link>
      <pubDate>Sun, 16 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2019/06/rollup/</guid>
      <description>年出写了 Gulp 和 Webpack 的介绍，侧重讲了 Webpack 的原理，一个插件系统和一堆钩子。 之前看 unpkg 发现还有第三个常用的打包工具 rollup；把这 3 类放做个简单的比较就</description>
    </item>
    
    <item>
      <title>Singularity —— HTTP API 类型系统的设计</title>
      <link>https://gitai.me/2019/06/singularity/</link>
      <pubDate>Sun, 02 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2019/06/singularity/</guid>
      <description>预示项目的起点，通过接口定义，完成前后端，测试的自动化。 一般的接口定义服务都要求语言无关，比如 RAML[^RAML] RESTful API Modeling Language，是设计接口的一种方式</description>
    </item>
    
    <item>
      <title>SELinux 策略和 Nginx 403 的问题</title>
      <link>https://gitai.me/2019/05/selinux-%E7%AD%96%E7%95%A5%E5%92%8C-nginx-403-%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 20 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2019/05/selinux-%E7%AD%96%E7%95%A5%E5%92%8C-nginx-403-%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;以此来纪念我加班的 5.20&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Nginx 之类的 Httpd 服务使用非 /var/www 产生的 Permission denied 错误，原因在于权限设置有误。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;2019/05/20 10:53:14 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;error&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; 11262#0: *16 open&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/sangfor/*/*/favicon.ico&amp;#34;&lt;/span&gt; failed &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;13: Permission denied&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, client: 200.200.211.97, server: localhost, request: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GET /favicon.ico HTTP/1.1&amp;#34;&lt;/span&gt;, host: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10.58.12.67&amp;#34;&lt;/span&gt;, referrer: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://10.58.12.67/&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>AST: 换个角度看结构化文本</title>
      <link>https://gitai.me/2019/05/astselector/</link>
      <pubDate>Fri, 17 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2019/05/astselector/</guid>
      <description>如果想要选中上述代码中的黄色部分也就是所有的字符串类型的值，无论是正则还是啥方法，都是基本无法完成的；所以我们需要引入 AST 换个角度分析问题。 居</description>
    </item>
    
    <item>
      <title>Webpack Loader 和 Plugin</title>
      <link>https://gitai.me/2019/05/loaderplugin/</link>
      <pubDate>Mon, 13 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2019/05/loaderplugin/</guid>
      <description>想写个插件解析 JS 生成 JSON 的配置文件，其实就是 JSON.stringify(require(&#39;./manifest.js&#39;))。这个简单的操作。</description>
    </item>
    
    <item>
      <title>Chrome 插件&amp;离线应用开发的坑</title>
      <link>https://gitai.me/2019/05/chrome.runtime.onmessage/</link>
      <pubDate>Sat, 11 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2019/05/chrome.runtime.onmessage/</guid>
      <description>因为 Chrome 的那些接口又臭又长，而且都是异步回调，所以很适合练手 Promise/async 这些东西，但是遇到一个很奇怪的问题 const onMessage = (asyncFunc) =&amp;gt; chrome.runtime.onMessage.addListener ((msg, sender, sendResponse) =&amp;gt; { sendResponse (msg); }); 上面是一般操作，但</description>
    </item>
    
    <item>
      <title>实现一个简单的虚拟文件系统</title>
      <link>https://gitai.me/2019/05/fs-overlay/</link>
      <pubDate>Sat, 11 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2019/05/fs-overlay/</guid>
      <description>之前改了改 Oracle 开源的用 Rust 实现的 RunC，弄明白如何生成一个最小化的运行容器环境；但是那时候没去理清楚，如何实现分层的文件系统。这次要测试个脚本</description>
    </item>
    
    <item>
      <title>VSCode 断点调试 &amp; Webpack 初探</title>
      <link>https://gitai.me/2019/04/vscode-%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95-webpack-%E5%88%9D%E6%8E%A2/</link>
      <pubDate>Thu, 25 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2019/04/vscode-%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95-webpack-%E5%88%9D%E6%8E%A2/</guid>
      <description>&lt;pre&gt;&lt;code&gt;  webpack
  |- package.json
  |- webpack.config.js
  |- /src
  |  |- index.js
  |- /dist
    |- index.js
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;path&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;path&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#a6e22e&#34;&gt;module&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;exports&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;entry&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./src/index.js&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;output&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;filename&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;index.js&amp;#39;&lt;/span&gt;,
        &lt;span style=&#34;color:#a6e22e&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;path&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;resolve&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;__dirname&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dist&amp;#39;&lt;/span&gt;)
    }
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这是一个最简单的 Webpack Demo，如果参照官方的教程（写的一塌糊涂），可能还在 &lt;code&gt;package.json&lt;/code&gt; 的 &lt;code&gt;script&lt;/code&gt; 定义了 &lt;code&gt;build&lt;/code&gt; 命令。&lt;/p&gt;
&lt;p&gt;从 &lt;code&gt;webpack build&lt;/code&gt; 开始都发生了什么，来从 &lt;code&gt;node_modules/webpack/bin/webpack&lt;/code&gt; 开始看。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 Promise 实现的单元测试框架</title>
      <link>https://gitai.me/2019/04/%E4%BD%BF%E7%94%A8-promise-%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Thu, 25 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2019/04/%E4%BD%BF%E7%94%A8-promise-%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/</guid>
      <description>&lt;p&gt;写完才发现，到底是单元测试框架还是单元测试函数，是个问题？毕竟才&lt;/p&gt;
&lt;p&gt;不到 50 行。&lt;/p&gt;
&lt;p&gt;上一篇看 Webpack 源码的然后写了个仿 &lt;code&gt;tape&lt;/code&gt;，这里来理理如何用 Promise 实现单元测试。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A passing test&amp;#39;&lt;/span&gt;, (&lt;span style=&#34;color:#a6e22e&#34;&gt;assert&lt;/span&gt;) =&amp;gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;assert&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pass&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;This test will pass.&amp;#39;&lt;/span&gt;);
    &lt;span style=&#34;color:#a6e22e&#34;&gt;assert&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;();
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;例子是这样的，有那么一个 &lt;code&gt;test&lt;/code&gt; 方法，接受一个 Label 和函数作为参数。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>用 SVG &#43; Canvas &#43; WASM 实现低性能下发图</title>
      <link>https://gitai.me/2019/04/wasm-%E5%AE%9E%E7%8E%B0%E4%B8%8B%E5%8F%91%E5%9B%BE/</link>
      <pubDate>Wed, 24 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2019/04/wasm-%E5%AE%9E%E7%8E%B0%E4%B8%8B%E5%8F%91%E5%9B%BE/</guid>
      <description>&lt;p&gt;V2 上面看到个推分享的&lt;a href=&#34;https://www.v2ex.com/t/556279&#34;&gt;数据可视化之下发图实践&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://diycode.b0.upaiyun.com/photo/2019/c8bf9ab0e153ea3d4e8e96af221ea252.gif&#34; alt=&#34;下发图 Demo&#34;&gt;&lt;/p&gt;
&lt;p&gt;觉得挺有意思的，但是没用 Demo，所以在此尝试实现一下，并觉得他们的技术选型有问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://diycode.b0.upaiyun.com/photo/2019/c5bb8be7371282d71c7f808433cafb50.png&#34; alt=&#34;两款技术栈的具体性能对比&#34;&gt;&lt;/p&gt;
&lt;p&gt;首先，SVG 非原生的动画，实现上频繁触发 DOM 操作，要不然 SVG 本身性能应该不会比 Canvas 差。&lt;/p&gt;
&lt;p&gt;所以我准备复合上述 2 种方案，并且引入 WASM 优化计算逻辑，直接调用 Canvas。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>WIP: 写一个高性能的 Ucenter</title>
      <link>https://gitai.me/2019/02/ucenter/</link>
      <pubDate>Sun, 24 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2019/02/ucenter/</guid>
      <description>&lt;p&gt;立项中。。。（立项一年了，还没动&lt;/p&gt;
&lt;p&gt;主要是实现一个通用的鉴权和授权系统，以及一个非侵入式的转化中间层，提供对其他服务的账号系统的转化。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>睁眼说瞎话 —— GUI</title>
      <link>https://gitai.me/2019/02/gui/</link>
      <pubDate>Fri, 08 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2019/02/gui/</guid>
      <description>还记得很多年前，用着 WFC 拖界面，简单粗暴但是勉强能用，在 XP 下看看也还行，因为调用 .Net 的接口，体积也就 200kb。（但是真的丑 学到了 GDI+，一发</description>
    </item>
    
    <item>
      <title>利用 Hyper-V 直接安装 ArchLinux</title>
      <link>https://gitai.me/2019/02/hyper-v/</link>
      <pubDate>Sun, 03 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2019/02/hyper-v/</guid>
      <description>Windows 环境都配的差不多了，总有点小问题，WSL 太底层的又没实现；Hyper-V 虽然家庭版给他弄开了，但是没有分布式的共享磁盘支持，还是差了点啥，</description>
    </item>
    
    <item>
      <title>RUST 的定时与计时器</title>
      <link>https://gitai.me/2019/02/rust-timeout/</link>
      <pubDate>Sat, 02 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2019/02/rust-timeout/</guid>
      <description>#![feature(duration_as_u128)] use std::sync::{Arc, Mutex}; use std::thread; use std::time::{Duration, SystemTime}; use std::sync::mpsc; use std::thread::JoinHandle; fn main() { let (tx, rx) = mpsc::channel(); let now = SystemTime::now(); let handle = thread::spawn(move || { { // 定时器 let tx = tx.clone(); thread::spawn(move || {// do something thread::sleep(Duration::from_millis(500)); tx.send(Err(())).unwrap(); }); } // 干一些不为人知的事情 thread::sleep(Duration::from_millis(300)); tx.send(Ok(&amp;#34;result&amp;#34;)).unwrap(); }); match rx.recv().unwrap() { // 计时器</description>
    </item>
    
    <item>
      <title>前端打包常见工具</title>
      <link>https://gitai.me/2019/01/gulpwebpack/</link>
      <pubDate>Thu, 31 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2019/01/gulpwebpack/</guid>
      <description>之前简单提到前端工程化的工具，Gulp 和 Webpack。 这里整几个例子来详细理解一下，hexschool/gulp-demo Gulp // production || development // # gulp</description>
    </item>
    
    <item>
      <title>一个短路操作符失效的 BUG？</title>
      <link>https://gitai.me/2019/01/stupid-bugs-python-stringify/</link>
      <pubDate>Mon, 28 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2019/01/stupid-bugs-python-stringify/</guid>
      <description>遇上一个百思不得其解的 BUG logger.debug(&amp;#34;%s%s&amp;#34;, test_case_id, test_case_info) test_case_id = test_case_id or md5(test_case_info) logger.debug(&amp;#34;MD5: %s%s&amp;#34;, test_case_id, md5(test_case_info)) 09:18 None {&amp;#39;test_cases&amp;#39;: [{&amp;#39;output&amp;#39;: &amp;#39;420&amp;#39;, &amp;#39;input&amp;#39;: &amp;#39;5 8&amp;#39;}]} 09:18 MD5: None b676c8555a8384fd346b062397524020 交代背景，这是通过 exec gunicorn --workers $n --threads $n --error-logfile /log/gunicorn.log --time 600 --bind 0.0.0.0:8080 server:app flask Web 服务调用的一个方法 class</description>
    </item>
    
    <item>
      <title>前端杂谈</title>
      <link>https://gitai.me/2019/01/fe-notes/</link>
      <pubDate>Tue, 22 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2019/01/fe-notes/</guid>
      <description>作用域和闭包：你知道JavaScript的词法作用域是基于编译器（而非解释器！）语义的吗？ 你能解释词法作用域和作为值的函数这两者的直接结果之</description>
    </item>
    
    <item>
      <title>最简单的调用链和作用域</title>
      <link>https://gitai.me/2019/01/example-of-this/</link>
      <pubDate>Thu, 17 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2019/01/example-of-this/</guid>
      <description>在《你所不知的 JavaScript》中，作者列举了 this 的几种绑定原则，最基本的就是默认绑定，在此就来细说一下这最简单的默认绑定。 global = typeof window !== &amp;#39;undefined&amp;#39; ?</description>
    </item>
    
    <item>
      <title>遇上一个反直觉的 BUG</title>
      <link>https://gitai.me/2019/01/celery-4.x/</link>
      <pubDate>Wed, 16 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2019/01/celery-4.x/</guid>
      <description>app = Celery(&amp;#39;tasks&amp;#39;, backend=&amp;#39;redis://localhost:6379/0&amp;#39;, broker=&amp;#34;amqp://guest:guest@localhost:5672&amp;#34;) 官网的 Demo 就是这样写的，但是突然发现如果正式使用中，接口没做好兼容处理，比如增加一个新的异步任务，但是没有在旧的 worker 进行更新。就会遇到</description>
    </item>
    
    <item>
      <title>分析常见 OJ 沙箱</title>
      <link>https://gitai.me/2019/01/openjudge-sandbox/</link>
      <pubDate>Mon, 07 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2019/01/openjudge-sandbox/</guid>
      <description>沙箱就是为了隔离各应用，防止对上层系统的破坏。常见 OJ 的破坏方式其实我也不知道，又不打比赛。 姑且做了一点点了解： 恶意系统调用（ptrace， s</description>
    </item>
    
    <item>
      <title>JavaScript 萌新指北</title>
      <link>https://gitai.me/2018/12/getting-started-for-js/</link>
      <pubDate>Fri, 21 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2018/12/getting-started-for-js/</guid>
      <description>发现一个比我写的还多的文章1 顺手塞个大纲进来世界顶级公司的前端面试都问些什么 首先我要好好批判批判，是谁给我的勇气，3月份写了个 JavaScript 原型和继承 这</description>
    </item>
    
    <item>
      <title>Django 下同名 Cookies 的一个小问题</title>
      <link>https://gitai.me/2018/10/django-cookies/</link>
      <pubDate>Wed, 10 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2018/10/django-cookies/</guid>
      <description>Django 作为一个非常友好的框架，提供了各种层级的封装，基本上文档看完就能直接开发出很多有意思的东西。 但是因为被高度封装，开发中的很多奇葩的操作则被</description>
    </item>
    
    <item>
      <title>私有 Docker Registry 配置的一个小坑</title>
      <link>https://gitai.me/2018/09/docker-registry/</link>
      <pubDate>Fri, 21 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2018/09/docker-registry/</guid>
      <description>$ sudo docker sudo docker login -u username -p password example.com:5000 Error response from daemon: Get https://example:5000/v2/: x509: certificate signed by unknown authority 对此问题 Google 和 Github 已经有了很多资料，只是证书问题或者配置问题，然后遇上两端都是被高度封装的系统，相</description>
    </item>
    
    <item>
      <title>无脑的反代&#43;缓存说明书</title>
      <link>https://gitai.me/2018/04/reverse-proxy-and-cache/</link>
      <pubDate>Fri, 13 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2018/04/reverse-proxy-and-cache/</guid>
      <description>除了微博这个好图床，BAT 三家都有对应的防盗链机制。 一般来说，上图就会被 Ban。 我们能通过反代，很轻巧的解决这个问题，即使不说反盗链，反代还</description>
    </item>
    
    <item>
      <title>如何计算首屏加载时间</title>
      <link>https://gitai.me/2018/04/fp/</link>
      <pubDate>Thu, 12 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2018/04/fp/</guid>
      <description>统计页面加载的各项时间点是前端优化上非常重要的一项，W3C 和各厂商也为此开放了很多有用的接口。 API 及描述其功能 API 名称 功能 Navigation Timing 导航计时 能够帮助网</description>
    </item>
    
    <item>
      <title>JavaScript 原型和继承</title>
      <link>https://gitai.me/2018/03/js-prototype/</link>
      <pubDate>Fri, 23 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2018/03/js-prototype/</guid>
      <description>JavaScript 对于具有面向对象语言开发经验的人(Java or C++)来说是非常容易的，只是它是动态的并且不在语言本身提供类(Class) 的支持，在 ES2015 实现了</description>
    </item>
    
    <item>
      <title>加一层是解耦合的最佳方法</title>
      <link>https://gitai.me/2018/01/wp-auth/</link>
      <pubDate>Sun, 28 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2018/01/wp-auth/</guid>
      <description>最近，在一个初创公司，而且核心是内容的初创公司。WordPress 作为基础框架的使用还是非常常见的。 但是 WordPress 非常的臃肿，逐渐稳定之后，必然需要</description>
    </item>
    
    <item>
      <title>从自定义字体来看编码和显示的低耦合性</title>
      <link>https://gitai.me/2017/10/custom-font/</link>
      <pubDate>Sat, 28 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/10/custom-font/</guid>
      <description>编程作业中难免不出现做计算器这种然并卵，但是涉及知识复杂，又难拔高的任务。 对于本文，不过就是我在这瞎说，给这个月凑一篇，不过也希望可以产生新</description>
    </item>
    
    <item>
      <title>Entity Component System</title>
      <link>https://gitai.me/2017/09/ecs-example/</link>
      <pubDate>Thu, 14 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/09/ecs-example/</guid>
      <description>ECS 架构1是建立在渲染引擎、物理引擎之上的，主要解决的问题是如何建立一个模型来处理游戏对象 (Game Object) 的更新操作。 相比传统的面向对象模式，其复用性更高</description>
    </item>
    
    <item>
      <title>简单分析那些巨无霸 APP 是如何产生的？</title>
      <link>https://gitai.me/2017/09/apk-decompile-minimizes/</link>
      <pubDate>Wed, 06 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/09/apk-decompile-minimizes/</guid>
      <description>最近学校出现一台自助打印机，然后配套 APK 居然有 39 MB，遂我们来分析一下里面塞了啥？ PS: 虽然标题有逆向，但是并不打算写这部分，以及 smali 汇编语法也不做</description>
    </item>
    
    <item>
      <title>通用项目容器化小记</title>
      <link>https://gitai.me/2017/08/containerized/</link>
      <pubDate>Mon, 28 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/08/containerized/</guid>
      <description>Linux 容器(LXC) 和 Docker 技术可以提供一致的和可扩展的环境。 低损耗的运行环境带来微服务化和云端迁移的快速普及。但是多数应用和所属生态并不能直接迁移</description>
    </item>
    
    <item>
      <title>网易云音乐播放器全屏化自定义 CSS</title>
      <link>https://gitai.me/2017/08/full-screen-player-of-netease-music/</link>
      <pubDate>Sat, 26 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/08/full-screen-player-of-netease-music/</guid>
      <description>服务商为了安利客户端，简直丧心病，比如网易云音乐，无论移动设备还是 PC，总有那么点反人类的地方。遂随手改个 CSS 姑且算是增加了全屏显示歌词之类的</description>
    </item>
    
    <item>
      <title>d3.js 无向图绘制</title>
      <link>https://gitai.me/2017/07/undirected-graph/</link>
      <pubDate>Sat, 01 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/07/undirected-graph/</guid>
      <description>这只是数据可视化的一个小例子， 首先看看成品 戳进去会动的～ 首先写个 d3.js 的力图 参见人家的 布局 力导向图，在此不对重复内容进行赘述。 相比来说只是数据预</description>
    </item>
    
    <item>
      <title>Docker 运行 Spark 集群</title>
      <link>https://gitai.me/2017/05/running-spark-on-docker-swarm/</link>
      <pubDate>Wed, 03 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/05/running-spark-on-docker-swarm/</guid>
      <description>安装 docker 环境 参见之前的容器化系统的初始化教程。12 # curl -sSL get.docker.com | bash # pip install docker-compose $ git clone https://github.com/gettyimages/docker-spark.git . ├── conf │ ├── master │ │ └── spark-defaults.conf │ └── worker │ └── spark-defaults.conf ├── data ├─</description>
    </item>
    
    <item>
      <title>ESP8266 的小探针</title>
      <link>https://gitai.me/2017/05/esp8266-sniffer/</link>
      <pubDate>Tue, 02 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/05/esp8266-sniffer/</guid>
      <description>&lt;h2 id=&#34;简述&#34;&gt;简述&lt;/h2&gt;
&lt;p&gt;本文加入首先要有一个 X 系列，没有的麻烦隔壁淘宝。RMB 20 的是很稳的。&lt;/p&gt;
&lt;p&gt;以及采用 C 编写，但是主要都是调用 API&lt;/p&gt;
&lt;p&gt;糅合了以下几个小项目&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sniffer mode&lt;/li&gt;
&lt;li&gt;SmartConfig&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.penninkhof.com/2015/12/1610-over-the-air-esp8266-programming-using-platformio/&#34;&gt;OTA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://community.blynk.cc/t/updating-ota-is-amazing/7649/87&#34;&gt;HttpUpdater&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>ELK 部署</title>
      <link>https://gitai.me/2017/04/elk-deploy/</link>
      <pubDate>Tue, 25 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/04/elk-deploy/</guid>
      <description>&lt;p&gt;按照官方文档&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/start&#34;&gt;https://www.elastic.co/start&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;或者这份相对完整的安装说明&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.ibm.com/developerworks/cn/opensource/os-cn-elk-filebeat/index.html&#34;&gt;https://www.ibm.com/developerworks/cn/opensource/os-cn-elk-filebeat/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建 elk 用户和用户组&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;groupadd elk          # 添加用户组
useradd -g elk elk    # 添加用户到指定用户组
passwd elk            # 为指定用户设置密码
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以下只记录出现的坑&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PSI installation Guide</title>
      <link>https://gitai.me/2017/04/psi-installation-guide/</link>
      <pubDate>Mon, 24 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/04/psi-installation-guide/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;这其实是个外包，大概 $50&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Ubuntu 14.04 x64&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Install Apache2 + MySQL5.2 + PHP5.x env&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# sudo tasksel install lamp-server
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Clone repo in &lt;code&gt;/var/www/html&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# git clone https://git.oschina.net/crm8000/PSI.git
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;/var/www/html$ tree
.
├── index.php
├── info.php
├── phpmyadmin -&amp;gt; /usr/share/phpmyadmin/
└── psi -&amp;gt; /usr/share/PSI/

2 directories, 2 files
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Docker 下运行 Apache Beam 的例子</title>
      <link>https://gitai.me/2017/04/a-quick-demo-of-apache-beam-with-docker/</link>
      <pubDate>Sun, 23 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/04/a-quick-demo-of-apache-beam-with-docker/</guid>
      <description>&lt;p&gt;Apache Beam 是一个标准的编程模块，用于创建批处理和流式数据处理管道。&lt;/p&gt;
&lt;p&gt;简言之,这是一个 Java SDK，我们可以使用它来开发分析管道，如计算用户或事件，提取热门话题，或者分析用户会话。&lt;/p&gt;
&lt;p&gt;在这篇文章中，将说明如何在数分钟内启动一个 Apache Beam 的 demo ，得益于 docker 预打包的 Apache Flink 和 Beam。&lt;/p&gt;
&lt;p&gt;开始创建梁管道的 demo 也可以在 &lt;a href=&#34;https://github.com/ecesena/beam-starter&#34;&gt;Github&lt;/a&gt; 上找到。&lt;/p&gt;
&lt;p&gt;为了运行这个 demo， 我没需要 docker 和 docker-compose，为了运行 Beam 我们还需要 Java 和 Maven。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>NodeMCU 开发入门</title>
      <link>https://gitai.me/2017/04/getting-started-with-nodemcu/</link>
      <pubDate>Mon, 17 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/04/getting-started-with-nodemcu/</guid>
      <description>&lt;p&gt;入了个 nodemcu 来记一段初始化过程遇上的坑&lt;/p&gt;
&lt;p&gt;先插线，恩，卖家送了根很粗的烧录线（不过很快就被我烧了。&lt;/p&gt;
&lt;p&gt;全家福什么的我是不会拍的&lt;/p&gt;
&lt;p&gt;先做好基本的准备工作&lt;/p&gt;
&lt;p&gt;基础环境是 Chromebook 中的 Ubuntu，不过这其实并不重要&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从 0 开始的 IoT 学习小记</title>
      <link>https://gitai.me/2017/04/re-zero-starting-in-iot/</link>
      <pubDate>Thu, 13 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/04/re-zero-starting-in-iot/</guid>
      <description>&lt;h2 id=&#34;iot-平台类型&#34;&gt;IoT 平台类型&lt;/h2&gt;
&lt;p&gt;WoT.City 将 IoT 开发平台分为以下 3 种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Single Board Computer － 例如：Intel Edison&lt;/li&gt;
&lt;li&gt;High Performance MCU － 例如：ARM mbed&lt;/li&gt;
&lt;li&gt;WiFi MCU － 例如：ESP8266 與 NodeMCU&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般来说，不同类型的 IoT 开发平台，也会有不同的 IoT Cloud 架构，以及不同的 IoT Diagram（Use Scenario）。WoT.City 的 Web of Things Framework 就是依靠不同 IoT 类型，设计出不同的 WoT Server 架构。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;IoT Node (Device Type)&lt;/th&gt;
&lt;th&gt;Solution Platform&lt;/th&gt;
&lt;th&gt;IoT Diagram (Use Scenario)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Single Board Computer (SBC)&lt;/td&gt;
&lt;td&gt;Intel Edison、Qualcomm Dragonboard 410c etc.&lt;/td&gt;
&lt;td&gt;IoT Router etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;High Performance MCU&lt;/td&gt;
&lt;td&gt;ARM mbed OS、Neuclio&lt;/td&gt;
&lt;td&gt;Sensor hub (Time-series Data Type) etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WiFi MCU&lt;/td&gt;
&lt;td&gt;ESP8266、NodeMCU、EMW3165 etc.&lt;/td&gt;
&lt;td&gt;Sensor hub (Interrupt Type)、Network controller etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;: Device Types of IoT Node&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LatticeOS Project</title>
      <link>https://gitai.me/2017/03/imagine_cup_2017/</link>
      <pubDate>Tue, 28 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/03/imagine_cup_2017/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Home: &lt;a href=&#34;https://latticeos.github.io/&#34;&gt;https://latticeos.github.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Github: &lt;a href=&#34;https://github.com/LatticeOS/&#34;&gt;https://github.com/LatticeOS/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Slide of imagine cup 2017: &lt;a href=&#34;https://latticeos.github.io/slide_imagine_cup_2017.html&#34;&gt;https://latticeos.github.io/slide_imagine_cup_2017.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>容器化系统实践</title>
      <link>https://gitai.me/2017/03/contained-os/</link>
      <pubDate>Sat, 25 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/03/contained-os/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;App Sandbox is an access control technology provided in OS X, enforced at the kernel level. Its strategy is twofold:
App Sandbox enables you to describe how your app interacts with the system. The system then grants your app the access it needs to get its job done, and no more.
App Sandbox provides a last line of defense against the theft, corruption, or deletion of user data if an attacker successfully exploits security holes in your app or the frameworks it is linked against.
— Apple About App Sandbox[^2.1]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Containers Are the Next Package Manager &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;quick-start&#34;&gt;Quick Start&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;curl http://isostore-1252924862.cosgz.myqcloud.com/cins/install.sh | bash
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>ChromiumOS 快速开始指南</title>
      <link>https://gitai.me/2017/03/sdk-creation/</link>
      <pubDate>Thu, 23 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/03/sdk-creation/</guid>
      <description>&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;Chromium OS 项目有一个开发者工具包来提供一个独立的环境来构建目标系统。&lt;/p&gt;
&lt;p&gt;当你使用它，它只是一个 Gentoo/Linux  chroot，有很多构建脚本，以简化和自动化的整体构建过程。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rancher OS的二三事</title>
      <link>https://gitai.me/2017/03/things-of-rancheros/</link>
      <pubDate>Wed, 22 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/03/things-of-rancheros/</guid>
      <description>&lt;h2 id=&#34;grub-引导&#34;&gt;Grub 引导&lt;/h2&gt;
&lt;p&gt;官方提供了 live CD 的镜像&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，接下来挂载镜像分析结构&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# mount -o loop [path_of_iso] [path_mounted] &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;用 &lt;code&gt;tree&lt;/code&gt; 查看&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ tree
.
|-- boot
|   |-- global.cfg
|   |-- initrd-v0.8.1
|   |-- isolinux
|   |   |-- boot.cat
|   |   |-- isolinux.bin
|   |   |-- isolinux.cfg
|   |   &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;-- ldlinux.c32
|   |-- linux-current.cfg
|   &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;-- vmlinuz-4.9.12-rancher
&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;-- rancheros
    |-- Dockerfile.amd64
    &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;-- installer.tar.gz

&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; directories, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; files
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>修改 CoreOS: 提示和技巧</title>
      <link>https://gitai.me/2017/03/sdk-tips-and-tricks/</link>
      <pubDate>Tue, 21 Mar 2017 01:06:19 +0000</pubDate>
      
      <guid>https://gitai.me/2017/03/sdk-tips-and-tricks/</guid>
      <description>&lt;h2 id=&#34;找到所有打开的请求和问题&#34;&gt;找到所有打开的请求和问题&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/issues?user=coreos&#34;&gt;CoreOS Issues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/pulls?user=coreos&#34;&gt;CoreOS Pull Requests&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Docker 中鼠标键盘操作无响应</title>
      <link>https://gitai.me/2017/03/monitoring-events-keyboard-mouse-in-x/</link>
      <pubDate>Tue, 21 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/03/monitoring-events-keyboard-mouse-in-x/</guid>
      <description>&lt;p&gt;Docker 通过 namespace， cgroup 将容器与主机资源进行了隔离，默认情况下，在容器中运行带界面的软件在外部是看不到的。&lt;/p&gt;
&lt;p&gt;但是 Linuxer 总能折腾出各种奇葩，网上流传也是常见符合容器特性的方案是通过 xvfb + vnc，共享 x11 接口，或者转发 x11 嵌套字。&lt;/p&gt;
&lt;p&gt;其中 Docker 自家的 Jessie 所创建的 &lt;a href=&#34;https://github.com/jessfraz/dockerfiles&#34;&gt;Dockerfiles on the desktop&lt;/a&gt; 最为完整。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ChomeOS 的 GUI</title>
      <link>https://gitai.me/2017/03/gui-of-chromeos/</link>
      <pubDate>Sat, 18 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/03/gui-of-chromeos/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Google声明至2009年底，“Chrome OS”将以“Chromium OS”之名采用开放源代码。虽然“Chrome OS”植基于Linux内核，不过它会使用“一种新的系统”而不会采行目前正在使用中的Linux标准视窗系统，比如X窗口系统。 &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Q&amp;A of polybar</title>
      <link>https://gitai.me/2017/03/sdk-qa-of-polybar/</link>
      <pubDate>Fri, 17 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/03/sdk-qa-of-polybar/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/jaagr/polybar&#34;&gt;https://github.com/jaagr/polybar&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>容器化 GUI 的最小可实现模型</title>
      <link>https://gitai.me/2017/03/mvp_of_contained_x11/</link>
      <pubDate>Mon, 13 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/03/mvp_of_contained_x11/</guid>
      <description>&lt;p&gt;本文将基于 Ubuntu Server 16.04.1 LTS 64位 构造 docker 运行 GUI 服务的最小可实现模型。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>修改 CoreOS</title>
      <link>https://gitai.me/2017/03/sdk-modifying-coreos/</link>
      <pubDate>Sun, 12 Mar 2017 01:06:19 +0000</pubDate>
      
      <guid>https://gitai.me/2017/03/sdk-modifying-coreos/</guid>
      <description>&lt;p&gt;这些是构建 Container Linux 本身的说明。 在本指南结束时，您将构建一个可以在 KVM 下运行的开发版映像，并具有用于更改代码的工具。&lt;/p&gt;
&lt;p&gt;容器 Linux 是一个开源项目。 所有的容器 Linux 的源都可以在 &lt;a href=&#34;https://github.com/coreos/&#34;&gt;github&lt;/a&gt; 上。 如果您发现这些文档或代码的问题，请发送pull请求。&lt;/p&gt;
&lt;p&gt;直接发问题和建议到&lt;a href=&#34;irc://irc.freenode.org:6667/#coreos&#34;&gt;IRC频道&lt;/a&gt;或&lt;a href=&#34;https://groups.google.com/forum/#!forum/coreos-dev&#34;&gt;邮件列表&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>直接从硬盘运行 ISO 文件</title>
      <link>https://gitai.me/2017/02/linux-iso-boot/</link>
      <pubDate>Sat, 25 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/02/linux-iso-boot/</guid>
      <description>&lt;p&gt;相比其他 Linux 发行版，Ubuntu 及其衍生版可以更容易的完成支持。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ISO 镜像只能通过 GNU GRUB 启动，所以需要在 Linux 环境下启动。&lt;/li&gt;
&lt;li&gt;live 环境下只支持发行版的 live CD 版本&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>简单的数据抓取和处理</title>
      <link>https://gitai.me/2017/02/uzuki-tkvw7c3d4z/</link>
      <pubDate>Sun, 12 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/02/uzuki-tkvw7c3d4z/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;这也是个外包，￥1000，用于建立机器学习语料库。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;日常写垃圾代码 +1 _(:з」∠)_&lt;/p&gt;
&lt;p&gt;发现一个爬小故事的需求，于是随后 Google 出一个站 &lt;a href=&#34;https://americanliterature.com/short-stories-for-children&#34;&gt;Short Stories for Children&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;很好，读出来是静态站，网页结构也比较简单。&lt;/p&gt;
&lt;p&gt;爬虫爬起，好像需求 1k 个就够了。&lt;/p&gt;
&lt;p&gt;那也没必要上那些吓人的瑞士军刀。&lt;/p&gt;
&lt;p&gt;找找第三方的爬虫服务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;import.io&lt;/li&gt;
&lt;li&gt;神箭手&lt;/li&gt;
&lt;li&gt;造数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;文档略麻烦，估摸着不如自己写。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>串口数据持久化手札</title>
      <link>https://gitai.me/2017/02/logs-of-serial-input-data-persistenced/</link>
      <pubDate>Fri, 10 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/02/logs-of-serial-input-data-persistenced/</guid>
      <description>&lt;p&gt;前面已经 WIFI 探针已经说到，用各种第三方工具和单片机进行交互。&lt;/p&gt;
&lt;p&gt;但是为了开发我们更需要的是可以被接入的 SDK&lt;/p&gt;
&lt;p&gt;乐鑫官方有个 &lt;code&gt;esptool&lt;/code&gt;，这是个 Python 编写的终端工具，对于 Python 和 JavaScript 这类解释性需要来说，最大的好处就是原始码直接发布，虽然也可以编译混淆，但是基本非商业应用没人这么做。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;platformio&lt;/code&gt; 有个 &lt;code&gt;pio device monitor&lt;/code&gt; 命令，启动一个串口交互界面。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>串口通讯基础</title>
      <link>https://gitai.me/2017/02/serial-input-basics/</link>
      <pubDate>Fri, 10 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/02/serial-input-basics/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;一个准备入硬件坑的软件工程师&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;目录&#34;&gt;目录&lt;/h1&gt;
&lt;p&gt;本教程中的以下部分&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;简介&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Arduino标准的串行数据缓慢&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;示例1 - 接收单个字符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为什么代码被组织到函数中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;示例2 - 从串行监视器接收多个字符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;示例3 - 更完整的系统&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以接收多少个字符？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;示例中未使用的事件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;serialEvent（）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;清除输入缓冲区&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接收数字而不是文本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;示例4 - 从串行监视器接收单个数字&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;示例5 - 接收和解析数个数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;二进制数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;示例6 - 接收二进制数据的程序请注意，本教程将继续进入接下来的2个帖子&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>LEMP 安装</title>
      <link>https://gitai.me/2017/02/lemp/</link>
      <pubDate>Tue, 07 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/02/lemp/</guid>
      <description>&lt;p&gt;LEMP&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; = Linux + nginx (pronounced &amp;ldquo;engine x&amp;rdquo;) + MySQL + PHP&lt;/p&gt;
&lt;h2 id=&#34;环境&#34;&gt;环境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Ubuntu 16.04 LTS&lt;/li&gt;
&lt;li&gt;PHP 7.0.15 (with php-fpm)&lt;/li&gt;
&lt;li&gt;nginx 1.10.0&lt;/li&gt;
&lt;li&gt;mysql 5.7&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;$ apt search php | grep &amp;quot;^php&amp;quot;
php/xenial,xenial,now 1:7.0+35ubuntu6 all
php-fpm/xenial,xenial,now 1:7.0+35ubuntu6 all
php7.0/xenial-security,xenial-security,xenial-updates,xenial-updates,now 7.0.15-0ubuntu0.16.04.4 all
php7.0-fpm/xenial-security,xenial-updates,now 7.0.15-0ubuntu0.16.04.4 amd64
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Hyacinth</title>
      <link>https://gitai.me/2017/02/hyacinth-reader/</link>
      <pubDate>Mon, 06 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/02/hyacinth-reader/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;A mobile-friendly reader powered by Vue 2.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://wx1.sinaimg.cn/mw690/690c6f7cgy1fci57vzkmkg20dc07iu0y.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;todo&#34;&gt;TODO&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 分页器 (参照豆瓣阅读实现)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 响应式&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 阅读模式 (豆瓣)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 动态加载
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 水平：豆瓣&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 垂直：微博/Twitter&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 源文件格式
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Plain Text&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Html&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Markdown&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 章节目录&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 全文检索&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 字体样式&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; HTML5 History Mode&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Progressive Web Apps&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 漢字標準格式&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>ChromeBook 开放外网访问</title>
      <link>https://gitai.me/2016/12/chromebook-iptables/</link>
      <pubDate>Sun, 25 Dec 2016 10:10:36 +0000</pubDate>
      
      <guid>https://gitai.me/2016/12/chromebook-iptables/</guid>
      <description>&lt;p&gt;尝试在 Dell ChromeBook 11 i3 版本塞了一个不是那么大的 MC 服务器。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ ip addr
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu &lt;span style=&#34;color:#ae81ff&#34;&gt;65536&lt;/span&gt; qdisc noqueue state UNKNOWN group default 
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
2: wlan0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span style=&#34;color:#ae81ff&#34;&gt;1500&lt;/span&gt; qdisc mq state UP group default qlen &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;
    link/ether 34:68:95:82:e5:cd brd ff:ff:ff:ff:ff:ff
    inet 192.168.10.139/24 brd 192.168.10.255 scope global wlan0
    inet6 fdd4:64d:dd09:0:511b:d75b:e0f:b043/64 scope global temporary dynamic 
       valid_lft 603780sec preferred_lft 84780sec
    inet6 fdd4:64d:dd09:0:3668:95ff:fe82:e5cd/64 scope global dynamic 
       valid_lft forever preferred_lft forever
    inet6 fe80::3668:95ff:fe82:e5cd/64 scope link 
       valid_lft forever preferred_lft forever
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>五十音</title>
      <link>https://gitai.me/2016/12/kana/</link>
      <pubDate>Sat, 17 Dec 2016 19:29:12 +0000</pubDate>
      
      <guid>https://gitai.me/2016/12/kana/</guid>
      <description>&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;\&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;a&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;i&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;u&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;e&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;o&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;a&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$あ_ア$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$い_イ$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$う_ウ$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$え_エ$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$お_オ$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;k&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$か_カ$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$き_キ$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$く_ク$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$け_ケ$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$こ_コ$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;s&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$さ_サ$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$し_シ$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$す_ス$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$せ_セ$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$そ_ソ$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;t&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$た_タ$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$ち_チ$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$つ_ツ$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$て_テ$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$と_ト$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;n&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$な_ナ$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$に_ニ$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$ぬ_ヌ$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$ね_ネ$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$の_ノ$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;h&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$は_ハ$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$ひ_ヒ$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$ふ_フ$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$へ_ヘ$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$ほ_ホ$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;m&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$ま_マ$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$み_ミ$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$む_ム$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$め_メ$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$も_モ$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$や_ヤ$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$ゆ_ユ$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$よ_ヨ$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;r&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$ら_ラ$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$り_リ$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$む_ル$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$め_レ$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$ろ_ロ$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;w&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$わ_ワ$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$を_ヲ$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;: 五十音圖（5 段 10 行） 45 个音，90 个假名&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;汉字&lt;/dt&gt;
&lt;dd&gt;名词，形容词，动词词干&lt;/dd&gt;
&lt;dt&gt;平假名&lt;/dt&gt;
&lt;dd&gt;形容词，动词词尾；
助词，副词，助动词；
无汉字或汉字难读难写的单词&lt;/dd&gt;
&lt;dt&gt;片假名&lt;/dt&gt;
&lt;dd&gt;外来词；
拟声、拟态词；
强调&lt;/dd&gt;
&lt;dt&gt;罗马字&lt;/dt&gt;
&lt;dd&gt;用拉丁字母标注的日语读音
多用于人名，地名，公司名，产品名等&lt;/dd&gt;
&lt;/dl&gt;</description>
    </item>
    
    <item>
      <title>WIP：Pulldown-cmark 分析</title>
      <link>https://gitai.me/2016/07/pulldown/</link>
      <pubDate>Sun, 31 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2016/07/pulldown/</guid>
      <description>Pulldown-cmark 这是一个对于 CommonMark 的 Pull 解析器，使用 Rust 编写。配带一个简单的终端工具，来渲染 HTML。 设计原则： 快速; 最小的分配和复制 安全; Rust，且未使用 unsafe 块</description>
    </item>
    
    <item>
      <title>聚合 Android 主题</title>
      <link>https://gitai.me/2016/06/merge-android-theme/</link>
      <pubDate>Wed, 22 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2016/06/merge-android-theme/</guid>
      <description>通过最近 3 篇文章 应用打包流程 Android 主题引擎 Zip 结构分析 来对现有的 Icon Pack 进行适应性修改 Icon Pack 类型参见 Android 主题引擎 主要以 CyanogenMod 的 Assets 和 Nova 的 res 文件夹为主 本文就建立在</description>
    </item>
    
    <item>
      <title>Android 主题引擎</title>
      <link>https://gitai.me/2016/06/android-theme-engine/</link>
      <pubDate>Tue, 21 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2016/06/android-theme-engine/</guid>
      <description>&lt;p&gt;目前只有关于图标包的制作方法&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitai.me/img/Android-icon-packs-Google-Play-Store.png&#34; alt=&#34;Android-icon-packs-Google-Play-Store&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android 打包流程</title>
      <link>https://gitai.me/2016/06/android-application-build-or-compilation-process/</link>
      <pubDate>Mon, 20 Jun 2016 07:04:34 +0000</pubDate>
      
      <guid>https://gitai.me/2016/06/android-application-build-or-compilation-process/</guid>
      <description>&lt;p&gt;这篇文章是解释Android程序如何被编译和执行的概述。&lt;/p&gt;
&lt;p&gt;因为 Android 应用程序的执行过程包括像 DEX，APK，dx tool，aapt tool和javac等各种术语.所以我会先尝试各种工具并参与编译和构建一个 Android 应用程序。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitai.me/img/android-application-build-process-diagram.png&#34; alt=&#34;android-application-build-process-diagram&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.java&lt;/code&gt;: Java 文件拓展名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.class&lt;/code&gt;: Java 文件编译后，一种8位字节的二进制流文件， 各个数据项按顺序紧密的从前向后排列， 相邻的项之间没有间隙， 这样可以使得class文件非常紧凑， 体积轻巧， 可以被JVM快速的加载至内存， 并且占据较少的内存空间。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DEX&lt;/code&gt;: Dalvik EXecutable file. 所有的.class文件内容整合到一个.dex文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JVM&lt;/code&gt;: Java Virtual Machine. 基于虚拟栈的虚拟机&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DVM&lt;/code&gt;: Dalvik Virtual Machine. 基于寄存器的虚拟机&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AIDL&lt;/code&gt;: Android Interface Definition Language&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apk&lt;/code&gt;: Android Application Package file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aidl&lt;/code&gt;: converts all AIDL files into .java files.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dx&lt;/code&gt;: convert all .class files into a single DEX file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apkbuilder&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zipalign&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Unable to run mksdcard SDK tool</title>
      <link>https://gitai.me/2016/06/2016-06-20-unable-to-run-mksdcard-sdk-tool/</link>
      <pubDate>Mon, 20 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2016/06/2016-06-20-unable-to-run-mksdcard-sdk-tool/</guid>
      <description>&lt;h2 id=&#34;errorunable-to-run-mksdcard-sdk-tool-in-debian&#34;&gt;Error:Unable to run mksdcard SDK tool in debian&lt;/h2&gt;
&lt;p&gt;You need some 32-bit binaries, and you have a 64-bit OS version (apparently). Try:&lt;/p&gt;
&lt;p&gt;For Ubuntu 14.10&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install lib32z1 lib32ncurses5 lib32bz2-1.0 lib32stdc++6
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For UBUNTU 15.04,15.10 &amp;amp; 16.04 LTS &amp;amp; Debian 8&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install lib32stdc++6
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For Cent OS/RHEL&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo yum install zlib.i686 ncurses-libs.i686 bzip2-libs.i686 
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>SMS Bomber</title>
      <link>https://gitai.me/2016/04/smsbomb/</link>
      <pubDate>Thu, 07 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2016/04/smsbomb/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Trick To Send Unlimited Messages.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;注意&lt;/code&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;只用于测试&lt;/li&gt;
&lt;li&gt;请勿填写他人号码&lt;/li&gt;
&lt;li&gt;引用数据均来自于互联网搜集&lt;/li&gt;
&lt;li&gt;开发者并不保证其有效性和可靠性&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用本程序造成的一切后果由使用者自行承担&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Also Sprach</title>
      <link>https://gitai.me/2016/03/also-sprach/</link>
      <pubDate>Sat, 26 Mar 2016 18:15:36 +0000</pubDate>
      
      <guid>https://gitai.me/2016/03/also-sprach/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Share our collection of inspirational and famous quotes by authors you know and love. &lt;!-- raw HTML omitted --&gt;BrainyQuote&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Version: &lt;code&gt;0.2.4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Total: &lt;code&gt;415405&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;zh-CN: &lt;code&gt;175706&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;en: &lt;code&gt;239699&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://api.gitai.me/quote&#34;&gt;Quote REST Api&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;接口已经失效，如果有谁需要后端源码，发邮件啊～&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Compile Lua 5.3.2 using Android Studio</title>
      <link>https://gitai.me/2016/03/compile-lua-5-3-2-using-android-studio/</link>
      <pubDate>Mon, 14 Mar 2016 11:51:36 +0000</pubDate>
      
      <guid>https://gitai.me/2016/03/compile-lua-5-3-2-using-android-studio/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Lua&lt;/strong&gt;  是一门强大、快速、轻量的嵌入式脚本语言。它由巴西里约热内卢 Pontifical Catholic 大学的 PUC-Rio 团队 开发。 Lua 是一个 自由软件， 广泛应用于世界上无数产品和项目。(&lt;a href=&#34;http://www.lua.org/&#34;&gt;http://www.lua.org/&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>「Kanban」:伊始</title>
      <link>https://gitai.me/2016/03/kanban/</link>
      <pubDate>Thu, 03 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2016/03/kanban/</guid>
      <description>&lt;h2 id=&#34;关于本系列&#34;&gt;关于本系列&lt;/h2&gt;
&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;为了完善看板娘（kanban[at]gitai.me），而开启本坑(kanban3)，直接用&lt;code&gt;Xposed&lt;/code&gt;注入jvm虚拟机，暴露相关方法，采用&lt;code&gt;Lua&lt;/code&gt;作为插件&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用「Protobuf」</title>
      <link>https://gitai.me/2016/02/use-protobuf/</link>
      <pubDate>Mon, 08 Feb 2016 09:26:36 +0000</pubDate>
      
      <guid>https://gitai.me/2016/02/use-protobuf/</guid>
      <description>&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/google/protobuf&#34;&gt;protobuf@google&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;依赖&#34;&gt;依赖&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;autoconf&lt;/li&gt;
&lt;li&gt;automake&lt;/li&gt;
&lt;li&gt;libtool&lt;/li&gt;
&lt;li&gt;curl (used to download gmock)&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>如何构建「tasker」插件？</title>
      <link>https://gitai.me/2016/02/plugin-for-tasker/</link>
      <pubDate>Sun, 07 Feb 2016 13:22:51 +0000</pubDate>
      
      <guid>https://gitai.me/2016/02/plugin-for-tasker/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Tasker绝对称得上是Android系统的神器之一，与Auto Memory Manager不同，Tasker不是加速型的软件，而是系统增强型的软件，由于有众多系统状态可控制，故使得Tasker一跃成为Android系统中最闪亮的明星。但Tasker也无疑是最难使用的软件，由于可以控制的地方太多，反而让人觉得有些无所适从，不知道要从哪开始下手，大家看教程吧，市场里售价6.3美金，准5星级评价。@CoolAPK&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>如何在「Docker」环境构建「Minecraft」Server？</title>
      <link>https://gitai.me/2016/01/minecraft-in-docker/</link>
      <pubDate>Fri, 01 Jan 2016 01:06:19 +0000</pubDate>
      
      <guid>https://gitai.me/2016/01/minecraft-in-docker/</guid>
      <description>&lt;h2 id=&#34;docker-是什么&#34;&gt;Docker 是什么？&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;轻量级的操作系统虚拟化解决方案&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;基本概念&#34;&gt;基本概念&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;仓库/Repository(类似Git仓库)
&lt;ul&gt;
&lt;li&gt;构建 &amp;gt; 2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;镜像/Image(只读的模板)
&lt;ul&gt;
&lt;li&gt;部署 &amp;gt; 3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;容器/Container(运行实例)&lt;/li&gt;
&lt;li&gt;数据卷／volume(类似 Linux mount)
&lt;ul&gt;
&lt;li&gt;挂载虚拟磁盘到指定目录&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Captchas Tool</title>
      <link>https://gitai.me/2015/12/smscodehelper/</link>
      <pubDate>Sun, 13 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2015/12/smscodehelper/</guid>
      <description>&lt;p&gt;验证码处理工具,检查短信中的验证码并给予在通知栏和Toast显示,输出至剪贴板等操作&lt;/p&gt;
&lt;p&gt;{% github GitaiQAQ SMSCodeHelper  06c400c auto_expand = true %}&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cli-Coding</title>
      <link>https://gitai.me/2015/10/cli-coding/</link>
      <pubDate>Mon, 26 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2015/10/cli-coding/</guid>
      <description>&lt;h1 id=&#34;cli-coding&#34;&gt;Cli-Coding&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://img.shields.io/dub/l/vibe-d.svg&#34; alt=&#34;MIT&#34;&gt;&lt;/p&gt;
&lt;p&gt;A simple command-line tool for coding.net by nodejs&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Node-Coding</title>
      <link>https://gitai.me/2015/10/node-coding/</link>
      <pubDate>Sat, 24 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2015/10/node-coding/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://img.shields.io/dub/l/vibe-d.svg&#34; alt=&#34;MIT&#34;&gt;&lt;/p&gt;
&lt;p&gt;Coding.net API Nodejs library.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hosts Editor</title>
      <link>https://gitai.me/2015/07/hostseditor/</link>
      <pubDate>Tue, 28 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2015/07/hostseditor/</guid>
      <description>&lt;p&gt;{% github GitaiQAQ Hosts-Studio-Android c95e58 auto_expand = true}&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Uninstall OpenJDK and install Oracle JDK on Linux</title>
      <link>https://gitai.me/2015/07/linux-jdk-install/</link>
      <pubDate>Mon, 06 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2015/07/linux-jdk-install/</guid>
      <description>&lt;p&gt;Java is a programming technology originally developed by Sun Microsystems and later acquired by Oracle. Oracle Java is a proprietary implementation for Java that is free to download and use for commercial use, but not to redistribute, therefore it is not included in a officially maintained repository.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>升级到最新的SSD Firmware</title>
      <link>https://gitai.me/2014/11/ssdoptimization/</link>
      <pubDate>Sun, 16 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2014/11/ssdoptimization/</guid>
      <description>&lt;p&gt;使用&lt;code&gt;sudo smartctl -a /dev/sda&lt;/code&gt;命令查看Firmware版本。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.smartmontools.org/&#34;&gt;Smartmontools&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install smartmontools
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>前端优化策略</title>
      <link>https://gitai.me/1/01/optimising-the-front-end/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/1/01/optimising-the-front-end/</guid>
      <description>原文： 前端性能优化常用总结 多数优化技巧并不是为了迅速提升产品本身性能，而是为了提升用户体验，如 MD 设计中对按钮的处理，只是为了给予用户一个有效</description>
    </item>
    
  </channel>
</rss>
