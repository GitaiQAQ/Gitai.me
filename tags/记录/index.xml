<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>记录 on Gitai.me</title>
    <link>https://gitai.me/tags/%E8%AE%B0%E5%BD%95/</link>
    <description>Recent content in 记录 on Gitai.me</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans-CN</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://github.com/GitaiQAQ&#34;&gt;Gitai&lt;/a&gt; 2011</copyright>
    <lastBuildDate>Tue, 02 May 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://gitai.me/tags/%E8%AE%B0%E5%BD%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ESP8266 的小探针</title>
      <link>https://gitai.me/2017/05/esp8266-sniffer/</link>
      <pubDate>Tue, 02 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/05/esp8266-sniffer/</guid>
      <description>&lt;h2 id=&#34;简述&#34;&gt;简述&lt;/h2&gt;
&lt;p&gt;本文加入首先要有一个 X 系列，没有的麻烦隔壁淘宝。RMB 20 的是很稳的。&lt;/p&gt;
&lt;p&gt;以及采用 C 编写，但是主要都是调用 API&lt;/p&gt;
&lt;p&gt;糅合了以下几个小项目&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sniffer mode&lt;/li&gt;
&lt;li&gt;SmartConfig&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.penninkhof.com/2015/12/1610-over-the-air-esp8266-programming-using-platformio/&#34;&gt;OTA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://community.blynk.cc/t/updating-ota-is-amazing/7649/87&#34;&gt;HttpUpdater&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>ELK 部署</title>
      <link>https://gitai.me/2017/04/elk-deploy/</link>
      <pubDate>Tue, 25 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/04/elk-deploy/</guid>
      <description>&lt;p&gt;按照官方文档&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/start&#34;&gt;https://www.elastic.co/start&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;或者这份相对完整的安装说明&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.ibm.com/developerworks/cn/opensource/os-cn-elk-filebeat/index.html&#34;&gt;https://www.ibm.com/developerworks/cn/opensource/os-cn-elk-filebeat/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建 elk 用户和用户组&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;groupadd elk          # 添加用户组
useradd -g elk elk    # 添加用户到指定用户组
passwd elk            # 为指定用户设置密码
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以下只记录出现的坑&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PSI installation Guide</title>
      <link>https://gitai.me/2017/04/psi-installation-guide/</link>
      <pubDate>Mon, 24 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/04/psi-installation-guide/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;这其实是个外包，大概 $50&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Ubuntu 14.04 x64&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Install Apache2 + MySQL5.2 + PHP5.x env&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# sudo tasksel install lamp-server
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Clone repo in &lt;code&gt;/var/www/html&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# git clone https://git.oschina.net/crm8000/PSI.git
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;/var/www/html$ tree
.
├── index.php
├── info.php
├── phpmyadmin -&amp;gt; /usr/share/phpmyadmin/
└── psi -&amp;gt; /usr/share/PSI/

2 directories, 2 files
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Docker 下运行 Apache Beam 的例子</title>
      <link>https://gitai.me/2017/04/a-quick-demo-of-apache-beam-with-docker/</link>
      <pubDate>Sun, 23 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/04/a-quick-demo-of-apache-beam-with-docker/</guid>
      <description>&lt;p&gt;Apache Beam 是一个标准的编程模块，用于创建批处理和流式数据处理管道。&lt;/p&gt;
&lt;p&gt;简言之,这是一个 Java SDK，我们可以使用它来开发分析管道，如计算用户或事件，提取热门话题，或者分析用户会话。&lt;/p&gt;
&lt;p&gt;在这篇文章中，将说明如何在数分钟内启动一个 Apache Beam 的 demo ，得益于 docker 预打包的 Apache Flink 和 Beam。&lt;/p&gt;
&lt;p&gt;开始创建梁管道的 demo 也可以在 &lt;a href=&#34;https://github.com/ecesena/beam-starter&#34;&gt;Github&lt;/a&gt; 上找到。&lt;/p&gt;
&lt;p&gt;为了运行这个 demo， 我没需要 docker 和 docker-compose，为了运行 Beam 我们还需要 Java 和 Maven。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>NodeMCU 开发入门</title>
      <link>https://gitai.me/2017/04/getting-started-with-nodemcu/</link>
      <pubDate>Mon, 17 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/04/getting-started-with-nodemcu/</guid>
      <description>&lt;p&gt;入了个 nodemcu 来记一段初始化过程遇上的坑&lt;/p&gt;
&lt;p&gt;先插线，恩，卖家送了根很粗的烧录线（不过很快就被我烧了。&lt;/p&gt;
&lt;p&gt;全家福什么的我是不会拍的&lt;/p&gt;
&lt;p&gt;先做好基本的准备工作&lt;/p&gt;
&lt;p&gt;基础环境是 Chromebook 中的 Ubuntu，不过这其实并不重要&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从 0 开始的 IoT 学习小记</title>
      <link>https://gitai.me/2017/04/re-zero-starting-in-iot/</link>
      <pubDate>Thu, 13 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/04/re-zero-starting-in-iot/</guid>
      <description>&lt;h2 id=&#34;iot-平台类型&#34;&gt;IoT 平台类型&lt;/h2&gt;
&lt;p&gt;WoT.City 将 IoT 开发平台分为以下 3 种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Single Board Computer － 例如：Intel Edison&lt;/li&gt;
&lt;li&gt;High Performance MCU － 例如：ARM mbed&lt;/li&gt;
&lt;li&gt;WiFi MCU － 例如：ESP8266 與 NodeMCU&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般来说，不同类型的 IoT 开发平台，也会有不同的 IoT Cloud 架构，以及不同的 IoT Diagram（Use Scenario）。WoT.City 的 Web of Things Framework 就是依靠不同 IoT 类型，设计出不同的 WoT Server 架构。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;IoT Node (Device Type)&lt;/th&gt;
&lt;th&gt;Solution Platform&lt;/th&gt;
&lt;th&gt;IoT Diagram (Use Scenario)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Single Board Computer (SBC)&lt;/td&gt;
&lt;td&gt;Intel Edison、Qualcomm Dragonboard 410c etc.&lt;/td&gt;
&lt;td&gt;IoT Router etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;High Performance MCU&lt;/td&gt;
&lt;td&gt;ARM mbed OS、Neuclio&lt;/td&gt;
&lt;td&gt;Sensor hub (Time-series Data Type) etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WiFi MCU&lt;/td&gt;
&lt;td&gt;ESP8266、NodeMCU、EMW3165 etc.&lt;/td&gt;
&lt;td&gt;Sensor hub (Interrupt Type)、Network controller etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;: Device Types of IoT Node&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>容器化系统实践</title>
      <link>https://gitai.me/2017/03/contained-os/</link>
      <pubDate>Sat, 25 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/03/contained-os/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;App Sandbox is an access control technology provided in OS X, enforced at the kernel level. Its strategy is twofold:
App Sandbox enables you to describe how your app interacts with the system. The system then grants your app the access it needs to get its job done, and no more.
App Sandbox provides a last line of defense against the theft, corruption, or deletion of user data if an attacker successfully exploits security holes in your app or the frameworks it is linked against.
— Apple About App Sandbox[^2.1]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Containers Are the Next Package Manager &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;quick-start&#34;&gt;Quick Start&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;curl http://isostore-1252924862.cosgz.myqcloud.com/cins/install.sh | bash
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>ChromiumOS 快速开始指南</title>
      <link>https://gitai.me/2017/03/sdk-creation/</link>
      <pubDate>Thu, 23 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/03/sdk-creation/</guid>
      <description>&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;Chromium OS 项目有一个开发者工具包来提供一个独立的环境来构建目标系统。&lt;/p&gt;
&lt;p&gt;当你使用它，它只是一个 Gentoo/Linux  chroot，有很多构建脚本，以简化和自动化的整体构建过程。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rancher OS的二三事</title>
      <link>https://gitai.me/2017/03/things-of-rancheros/</link>
      <pubDate>Wed, 22 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/03/things-of-rancheros/</guid>
      <description>&lt;h2 id=&#34;grub-引导&#34;&gt;Grub 引导&lt;/h2&gt;
&lt;p&gt;官方提供了 live CD 的镜像&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，接下来挂载镜像分析结构&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# mount -o loop [path_of_iso] [path_mounted] &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;用 &lt;code&gt;tree&lt;/code&gt; 查看&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ tree
.
|-- boot
|   |-- global.cfg
|   |-- initrd-v0.8.1
|   |-- isolinux
|   |   |-- boot.cat
|   |   |-- isolinux.bin
|   |   |-- isolinux.cfg
|   |   &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;-- ldlinux.c32
|   |-- linux-current.cfg
|   &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;-- vmlinuz-4.9.12-rancher
&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;-- rancheros
    |-- Dockerfile.amd64
    &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;-- installer.tar.gz

&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; directories, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; files
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>修改 CoreOS: 提示和技巧</title>
      <link>https://gitai.me/2017/03/sdk-tips-and-tricks/</link>
      <pubDate>Tue, 21 Mar 2017 01:06:19 +0000</pubDate>
      
      <guid>https://gitai.me/2017/03/sdk-tips-and-tricks/</guid>
      <description>&lt;h2 id=&#34;找到所有打开的请求和问题&#34;&gt;找到所有打开的请求和问题&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/issues?user=coreos&#34;&gt;CoreOS Issues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/pulls?user=coreos&#34;&gt;CoreOS Pull Requests&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Docker 中鼠标键盘操作无响应</title>
      <link>https://gitai.me/2017/03/monitoring-events-keyboard-mouse-in-x/</link>
      <pubDate>Tue, 21 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/03/monitoring-events-keyboard-mouse-in-x/</guid>
      <description>&lt;p&gt;Docker 通过 namespace， cgroup 将容器与主机资源进行了隔离，默认情况下，在容器中运行带界面的软件在外部是看不到的。&lt;/p&gt;
&lt;p&gt;但是 Linuxer 总能折腾出各种奇葩，网上流传也是常见符合容器特性的方案是通过 xvfb + vnc，共享 x11 接口，或者转发 x11 嵌套字。&lt;/p&gt;
&lt;p&gt;其中 Docker 自家的 Jessie 所创建的 &lt;a href=&#34;https://github.com/jessfraz/dockerfiles&#34;&gt;Dockerfiles on the desktop&lt;/a&gt; 最为完整。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Q&amp;A of polybar</title>
      <link>https://gitai.me/2017/03/sdk-qa-of-polybar/</link>
      <pubDate>Fri, 17 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/03/sdk-qa-of-polybar/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/jaagr/polybar&#34;&gt;https://github.com/jaagr/polybar&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>容器化 GUI 的最小可实现模型</title>
      <link>https://gitai.me/2017/03/mvp_of_contained_x11/</link>
      <pubDate>Mon, 13 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/03/mvp_of_contained_x11/</guid>
      <description>&lt;p&gt;本文将基于 Ubuntu Server 16.04.1 LTS 64位 构造 docker 运行 GUI 服务的最小可实现模型。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>修改 CoreOS</title>
      <link>https://gitai.me/2017/03/sdk-modifying-coreos/</link>
      <pubDate>Sun, 12 Mar 2017 01:06:19 +0000</pubDate>
      
      <guid>https://gitai.me/2017/03/sdk-modifying-coreos/</guid>
      <description>&lt;p&gt;这些是构建 Container Linux 本身的说明。 在本指南结束时，您将构建一个可以在 KVM 下运行的开发版映像，并具有用于更改代码的工具。&lt;/p&gt;
&lt;p&gt;容器 Linux 是一个开源项目。 所有的容器 Linux 的源都可以在 &lt;a href=&#34;https://github.com/coreos/&#34;&gt;github&lt;/a&gt; 上。 如果您发现这些文档或代码的问题，请发送pull请求。&lt;/p&gt;
&lt;p&gt;直接发问题和建议到&lt;a href=&#34;irc://irc.freenode.org:6667/#coreos&#34;&gt;IRC频道&lt;/a&gt;或&lt;a href=&#34;https://groups.google.com/forum/#!forum/coreos-dev&#34;&gt;邮件列表&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>直接从硬盘运行 ISO 文件</title>
      <link>https://gitai.me/2017/02/linux-iso-boot/</link>
      <pubDate>Sat, 25 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/02/linux-iso-boot/</guid>
      <description>&lt;p&gt;相比其他 Linux 发行版，Ubuntu 及其衍生版可以更容易的完成支持。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ISO 镜像只能通过 GNU GRUB 启动，所以需要在 Linux 环境下启动。&lt;/li&gt;
&lt;li&gt;live 环境下只支持发行版的 live CD 版本&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>简单的数据抓取和处理</title>
      <link>https://gitai.me/2017/02/uzuki-tkvw7c3d4z/</link>
      <pubDate>Sun, 12 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/02/uzuki-tkvw7c3d4z/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;这也是个外包，￥1000，用于建立机器学习语料库。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;日常写垃圾代码 +1 _(:з」∠)_&lt;/p&gt;
&lt;p&gt;发现一个爬小故事的需求，于是随后 Google 出一个站 &lt;a href=&#34;https://americanliterature.com/short-stories-for-children&#34;&gt;Short Stories for Children&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;很好，读出来是静态站，网页结构也比较简单。&lt;/p&gt;
&lt;p&gt;爬虫爬起，好像需求 1k 个就够了。&lt;/p&gt;
&lt;p&gt;那也没必要上那些吓人的瑞士军刀。&lt;/p&gt;
&lt;p&gt;找找第三方的爬虫服务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;import.io&lt;/li&gt;
&lt;li&gt;神箭手&lt;/li&gt;
&lt;li&gt;造数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;文档略麻烦，估摸着不如自己写。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>串口数据持久化手札</title>
      <link>https://gitai.me/2017/02/logs-of-serial-input-data-persistenced/</link>
      <pubDate>Fri, 10 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/02/logs-of-serial-input-data-persistenced/</guid>
      <description>&lt;p&gt;前面已经 WIFI 探针已经说到，用各种第三方工具和单片机进行交互。&lt;/p&gt;
&lt;p&gt;但是为了开发我们更需要的是可以被接入的 SDK&lt;/p&gt;
&lt;p&gt;乐鑫官方有个 &lt;code&gt;esptool&lt;/code&gt;，这是个 Python 编写的终端工具，对于 Python 和 JavaScript 这类解释性需要来说，最大的好处就是原始码直接发布，虽然也可以编译混淆，但是基本非商业应用没人这么做。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;platformio&lt;/code&gt; 有个 &lt;code&gt;pio device monitor&lt;/code&gt; 命令，启动一个串口交互界面。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>串口通讯基础</title>
      <link>https://gitai.me/2017/02/serial-input-basics/</link>
      <pubDate>Fri, 10 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/02/serial-input-basics/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;一个准备入硬件坑的软件工程师&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;目录&#34;&gt;目录&lt;/h1&gt;
&lt;p&gt;本教程中的以下部分&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;简介&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Arduino标准的串行数据缓慢&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;示例1 - 接收单个字符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为什么代码被组织到函数中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;示例2 - 从串行监视器接收多个字符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;示例3 - 更完整的系统&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以接收多少个字符？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;示例中未使用的事件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;serialEvent（）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;清除输入缓冲区&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接收数字而不是文本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;示例4 - 从串行监视器接收单个数字&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;示例5 - 接收和解析数个数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;二进制数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;示例6 - 接收二进制数据的程序请注意，本教程将继续进入接下来的2个帖子&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>LEMP 安装</title>
      <link>https://gitai.me/2017/02/lemp/</link>
      <pubDate>Tue, 07 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/02/lemp/</guid>
      <description>&lt;p&gt;LEMP&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; = Linux + nginx (pronounced &amp;ldquo;engine x&amp;rdquo;) + MySQL + PHP&lt;/p&gt;
&lt;h2 id=&#34;环境&#34;&gt;环境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Ubuntu 16.04 LTS&lt;/li&gt;
&lt;li&gt;PHP 7.0.15 (with php-fpm)&lt;/li&gt;
&lt;li&gt;nginx 1.10.0&lt;/li&gt;
&lt;li&gt;mysql 5.7&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;$ apt search php | grep &amp;quot;^php&amp;quot;
php/xenial,xenial,now 1:7.0+35ubuntu6 all
php-fpm/xenial,xenial,now 1:7.0+35ubuntu6 all
php7.0/xenial-security,xenial-security,xenial-updates,xenial-updates,now 7.0.15-0ubuntu0.16.04.4 all
php7.0-fpm/xenial-security,xenial-updates,now 7.0.15-0ubuntu0.16.04.4 amd64
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Hyacinth</title>
      <link>https://gitai.me/2017/02/hyacinth-reader/</link>
      <pubDate>Mon, 06 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/02/hyacinth-reader/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;A mobile-friendly reader powered by Vue 2.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://wx1.sinaimg.cn/mw690/690c6f7cgy1fci57vzkmkg20dc07iu0y.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;todo&#34;&gt;TODO&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 分页器 (参照豆瓣阅读实现)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 响应式&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 阅读模式 (豆瓣)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 动态加载
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 水平：豆瓣&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 垂直：微博/Twitter&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 源文件格式
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Plain Text&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Html&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Markdown&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 章节目录&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 全文检索&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 字体样式&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; HTML5 History Mode&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Progressive Web Apps&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 漢字標準格式&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>聚合 Android 主题</title>
      <link>https://gitai.me/2016/06/merge-android-theme/</link>
      <pubDate>Wed, 22 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2016/06/merge-android-theme/</guid>
      <description>通过最近 3 篇文章 应用打包流程 Android 主题引擎 Zip 结构分析 来对现有的 Icon Pack 进行适应性修改 Icon Pack 类型参见 Android 主题引擎 主要以 CyanogenMod 的 Assets 和 Nova 的 res 文件夹为主 本文就建立在</description>
    </item>
    
    <item>
      <title>Android 主题引擎</title>
      <link>https://gitai.me/2016/06/android-theme-engine/</link>
      <pubDate>Tue, 21 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2016/06/android-theme-engine/</guid>
      <description>&lt;p&gt;目前只有关于图标包的制作方法&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitai.me/img/Android-icon-packs-Google-Play-Store.png&#34; alt=&#34;Android-icon-packs-Google-Play-Store&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android 打包流程</title>
      <link>https://gitai.me/2016/06/android-application-build-or-compilation-process/</link>
      <pubDate>Mon, 20 Jun 2016 07:04:34 +0000</pubDate>
      
      <guid>https://gitai.me/2016/06/android-application-build-or-compilation-process/</guid>
      <description>&lt;p&gt;这篇文章是解释Android程序如何被编译和执行的概述。&lt;/p&gt;
&lt;p&gt;因为 Android 应用程序的执行过程包括像 DEX，APK，dx tool，aapt tool和javac等各种术语.所以我会先尝试各种工具并参与编译和构建一个 Android 应用程序。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitai.me/img/android-application-build-process-diagram.png&#34; alt=&#34;android-application-build-process-diagram&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.java&lt;/code&gt;: Java 文件拓展名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.class&lt;/code&gt;: Java 文件编译后，一种8位字节的二进制流文件， 各个数据项按顺序紧密的从前向后排列， 相邻的项之间没有间隙， 这样可以使得class文件非常紧凑， 体积轻巧， 可以被JVM快速的加载至内存， 并且占据较少的内存空间。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DEX&lt;/code&gt;: Dalvik EXecutable file. 所有的.class文件内容整合到一个.dex文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JVM&lt;/code&gt;: Java Virtual Machine. 基于虚拟栈的虚拟机&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DVM&lt;/code&gt;: Dalvik Virtual Machine. 基于寄存器的虚拟机&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AIDL&lt;/code&gt;: Android Interface Definition Language&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apk&lt;/code&gt;: Android Application Package file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aidl&lt;/code&gt;: converts all AIDL files into .java files.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dx&lt;/code&gt;: convert all .class files into a single DEX file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apkbuilder&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zipalign&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Unable to run mksdcard SDK tool</title>
      <link>https://gitai.me/2016/06/2016-06-20-unable-to-run-mksdcard-sdk-tool/</link>
      <pubDate>Mon, 20 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2016/06/2016-06-20-unable-to-run-mksdcard-sdk-tool/</guid>
      <description>&lt;h2 id=&#34;errorunable-to-run-mksdcard-sdk-tool-in-debian&#34;&gt;Error:Unable to run mksdcard SDK tool in debian&lt;/h2&gt;
&lt;p&gt;You need some 32-bit binaries, and you have a 64-bit OS version (apparently). Try:&lt;/p&gt;
&lt;p&gt;For Ubuntu 14.10&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install lib32z1 lib32ncurses5 lib32bz2-1.0 lib32stdc++6
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For UBUNTU 15.04,15.10 &amp;amp; 16.04 LTS &amp;amp; Debian 8&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install lib32stdc++6
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For Cent OS/RHEL&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo yum install zlib.i686 ncurses-libs.i686 bzip2-libs.i686 
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>如何构建「tasker」插件？</title>
      <link>https://gitai.me/2016/02/plugin-for-tasker/</link>
      <pubDate>Sun, 07 Feb 2016 13:22:51 +0000</pubDate>
      
      <guid>https://gitai.me/2016/02/plugin-for-tasker/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Tasker绝对称得上是Android系统的神器之一，与Auto Memory Manager不同，Tasker不是加速型的软件，而是系统增强型的软件，由于有众多系统状态可控制，故使得Tasker一跃成为Android系统中最闪亮的明星。但Tasker也无疑是最难使用的软件，由于可以控制的地方太多，反而让人觉得有些无所适从，不知道要从哪开始下手，大家看教程吧，市场里售价6.3美金，准5星级评价。@CoolAPK&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>使用 Bluemix、Docker 和 Watson 为 Minecraft 创建认知插件</title>
      <link>https://gitai.me/2016/01/cl-bluemix-minecraft-plugins-trs/</link>
      <pubDate>Sun, 31 Jan 2016 10:23:52 +0000</pubDate>
      
      <guid>https://gitai.me/2016/01/cl-bluemix-minecraft-plugins-trs/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;哪个 Java™ 程序的使用频率比其他任何 Java 程序高整整一个数量级？ 提示： 自 2009 年发布 beta 版本以来，该程序已售出了 7000 多万个副本。Microsoft 最近以 25 亿美元收购了创建这个程序的公司。围绕此程序已经形成了一个庞大的开发生态系统，而且数十万的人受到鼓励开始学习 Java 编程 — 以便可以开发此程序的扩展版本。
您从标题中可能已经猜到，这个程序就是 Minecraft 游戏，令人惊奇的是，这数十万开发人员主要是儿童和青少年。Minecraft 已成为市场上的一次现象级成功，部分原因在于它的独特结构：您可以通过商业渠道购买客户端（游戏的外观），但服务器可以自由扩展。任何人都可以启动自己的游戏服务器，这使得人们在根据自己的兴趣和好恶在网络上建立独特的 Minecraft 构建者社区时，拥有数千种不同的选择。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
  </channel>
</rss>
