<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on Gitai.me</title>
    <link>https://gitai.me/tags/docker/</link>
    <description>Recent content in Docker on Gitai.me</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans-CN</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://github.com/GitaiQAQ&#34;&gt;Gitai&lt;/a&gt; 2011</copyright>
    <lastBuildDate>Fri, 21 Sep 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://gitai.me/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>私有 Docker Registry 配置的一个小坑</title>
      <link>https://gitai.me/2018/09/docker-registry/</link>
      <pubDate>Fri, 21 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2018/09/docker-registry/</guid>
      <description>$ sudo docker sudo docker login -u username -p password example.com:5000 Error response from daemon: Get https://example:5000/v2/: x509: certificate signed by unknown authority 对此问题 Google 和 Github 已经有了很多资料，只是证书问题或者配置问题，然后遇上两端都是被高度封装的系统，相</description>
    </item>
    
    <item>
      <title>通用项目容器化小记</title>
      <link>https://gitai.me/2017/08/containerized/</link>
      <pubDate>Mon, 28 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/08/containerized/</guid>
      <description>Linux 容器(LXC) 和 Docker 技术可以提供一致的和可扩展的环境。 低损耗的运行环境带来微服务化和云端迁移的快速普及。但是多数应用和所属生态并不能直接迁移</description>
    </item>
    
    <item>
      <title>Docker 运行 Spark 集群</title>
      <link>https://gitai.me/2017/05/running-spark-on-docker-swarm/</link>
      <pubDate>Wed, 03 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/05/running-spark-on-docker-swarm/</guid>
      <description>安装 docker 环境 参见之前的容器化系统的初始化教程。12 # curl -sSL get.docker.com | bash # pip install docker-compose $ git clone https://github.com/gettyimages/docker-spark.git . ├── conf │ ├── master │ │ └── spark-defaults.conf │ └── worker │ └── spark-defaults.conf ├── data ├─</description>
    </item>
    
    <item>
      <title>Docker 下运行 Apache Beam 的例子</title>
      <link>https://gitai.me/2017/04/a-quick-demo-of-apache-beam-with-docker/</link>
      <pubDate>Sun, 23 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/04/a-quick-demo-of-apache-beam-with-docker/</guid>
      <description>&lt;p&gt;Apache Beam 是一个标准的编程模块，用于创建批处理和流式数据处理管道。&lt;/p&gt;
&lt;p&gt;简言之,这是一个 Java SDK，我们可以使用它来开发分析管道，如计算用户或事件，提取热门话题，或者分析用户会话。&lt;/p&gt;
&lt;p&gt;在这篇文章中，将说明如何在数分钟内启动一个 Apache Beam 的 demo ，得益于 docker 预打包的 Apache Flink 和 Beam。&lt;/p&gt;
&lt;p&gt;开始创建梁管道的 demo 也可以在 &lt;a href=&#34;https://github.com/ecesena/beam-starter&#34;&gt;Github&lt;/a&gt; 上找到。&lt;/p&gt;
&lt;p&gt;为了运行这个 demo， 我没需要 docker 和 docker-compose，为了运行 Beam 我们还需要 Java 和 Maven。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>容器化系统实践</title>
      <link>https://gitai.me/2017/03/contained-os/</link>
      <pubDate>Sat, 25 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/03/contained-os/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;App Sandbox is an access control technology provided in OS X, enforced at the kernel level. Its strategy is twofold:
App Sandbox enables you to describe how your app interacts with the system. The system then grants your app the access it needs to get its job done, and no more.
App Sandbox provides a last line of defense against the theft, corruption, or deletion of user data if an attacker successfully exploits security holes in your app or the frameworks it is linked against.
— Apple About App Sandbox[^2.1]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Containers Are the Next Package Manager &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;quick-start&#34;&gt;Quick Start&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;curl http://isostore-1252924862.cosgz.myqcloud.com/cins/install.sh | bash
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Rancher OS的二三事</title>
      <link>https://gitai.me/2017/03/things-of-rancheros/</link>
      <pubDate>Wed, 22 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/03/things-of-rancheros/</guid>
      <description>&lt;h2 id=&#34;grub-引导&#34;&gt;Grub 引导&lt;/h2&gt;
&lt;p&gt;官方提供了 live CD 的镜像&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，接下来挂载镜像分析结构&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# mount -o loop [path_of_iso] [path_mounted] &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;用 &lt;code&gt;tree&lt;/code&gt; 查看&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ tree
.
|-- boot
|   |-- global.cfg
|   |-- initrd-v0.8.1
|   |-- isolinux
|   |   |-- boot.cat
|   |   |-- isolinux.bin
|   |   |-- isolinux.cfg
|   |   &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;-- ldlinux.c32
|   |-- linux-current.cfg
|   &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;-- vmlinuz-4.9.12-rancher
&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;-- rancheros
    |-- Dockerfile.amd64
    &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;-- installer.tar.gz

&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; directories, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; files
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>修改 CoreOS: 提示和技巧</title>
      <link>https://gitai.me/2017/03/sdk-tips-and-tricks/</link>
      <pubDate>Tue, 21 Mar 2017 01:06:19 +0000</pubDate>
      
      <guid>https://gitai.me/2017/03/sdk-tips-and-tricks/</guid>
      <description>&lt;h2 id=&#34;找到所有打开的请求和问题&#34;&gt;找到所有打开的请求和问题&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/issues?user=coreos&#34;&gt;CoreOS Issues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/pulls?user=coreos&#34;&gt;CoreOS Pull Requests&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Docker 中鼠标键盘操作无响应</title>
      <link>https://gitai.me/2017/03/monitoring-events-keyboard-mouse-in-x/</link>
      <pubDate>Tue, 21 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/03/monitoring-events-keyboard-mouse-in-x/</guid>
      <description>&lt;p&gt;Docker 通过 namespace， cgroup 将容器与主机资源进行了隔离，默认情况下，在容器中运行带界面的软件在外部是看不到的。&lt;/p&gt;
&lt;p&gt;但是 Linuxer 总能折腾出各种奇葩，网上流传也是常见符合容器特性的方案是通过 xvfb + vnc，共享 x11 接口，或者转发 x11 嵌套字。&lt;/p&gt;
&lt;p&gt;其中 Docker 自家的 Jessie 所创建的 &lt;a href=&#34;https://github.com/jessfraz/dockerfiles&#34;&gt;Dockerfiles on the desktop&lt;/a&gt; 最为完整。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>容器化 GUI 的最小可实现模型</title>
      <link>https://gitai.me/2017/03/mvp_of_contained_x11/</link>
      <pubDate>Mon, 13 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2017/03/mvp_of_contained_x11/</guid>
      <description>&lt;p&gt;本文将基于 Ubuntu Server 16.04.1 LTS 64位 构造 docker 运行 GUI 服务的最小可实现模型。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>修改 CoreOS</title>
      <link>https://gitai.me/2017/03/sdk-modifying-coreos/</link>
      <pubDate>Sun, 12 Mar 2017 01:06:19 +0000</pubDate>
      
      <guid>https://gitai.me/2017/03/sdk-modifying-coreos/</guid>
      <description>&lt;p&gt;这些是构建 Container Linux 本身的说明。 在本指南结束时，您将构建一个可以在 KVM 下运行的开发版映像，并具有用于更改代码的工具。&lt;/p&gt;
&lt;p&gt;容器 Linux 是一个开源项目。 所有的容器 Linux 的源都可以在 &lt;a href=&#34;https://github.com/coreos/&#34;&gt;github&lt;/a&gt; 上。 如果您发现这些文档或代码的问题，请发送pull请求。&lt;/p&gt;
&lt;p&gt;直接发问题和建议到&lt;a href=&#34;irc://irc.freenode.org:6667/#coreos&#34;&gt;IRC频道&lt;/a&gt;或&lt;a href=&#34;https://groups.google.com/forum/#!forum/coreos-dev&#34;&gt;邮件列表&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何在「Docker」环境构建「Minecraft」Server？</title>
      <link>https://gitai.me/2016/01/minecraft-in-docker/</link>
      <pubDate>Fri, 01 Jan 2016 01:06:19 +0000</pubDate>
      
      <guid>https://gitai.me/2016/01/minecraft-in-docker/</guid>
      <description>&lt;h2 id=&#34;docker-是什么&#34;&gt;Docker 是什么？&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;轻量级的操作系统虚拟化解决方案&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;基本概念&#34;&gt;基本概念&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;仓库/Repository(类似Git仓库)
&lt;ul&gt;
&lt;li&gt;构建 &amp;gt; 2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;镜像/Image(只读的模板)
&lt;ul&gt;
&lt;li&gt;部署 &amp;gt; 3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;容器/Container(运行实例)&lt;/li&gt;
&lt;li&gt;数据卷／volume(类似 Linux mount)
&lt;ul&gt;
&lt;li&gt;挂载虚拟磁盘到指定目录&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
  </channel>
</rss>
