<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rust on Gitai.me</title>
    <link>https://gitai.me/tags/rust/</link>
    <description>Recent content in Rust on Gitai.me</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans-CN</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://github.com/GitaiQAQ&#34;&gt;Gitai&lt;/a&gt; 2011</copyright>
    <lastBuildDate>Sat, 02 Feb 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://gitai.me/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RUST 的定时与计时器</title>
      <link>https://gitai.me/2019/02/rust-timeout/</link>
      <pubDate>Sat, 02 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2019/02/rust-timeout/</guid>
      <description>#![feature(duration_as_u128)] use std::sync::{Arc, Mutex}; use std::thread; use std::time::{Duration, SystemTime}; use std::sync::mpsc; use std::thread::JoinHandle; fn main() { let (tx, rx) = mpsc::channel(); let now = SystemTime::now(); let handle = thread::spawn(move || { { // 定时器 let tx = tx.clone(); thread::spawn(move || {// do something thread::sleep(Duration::from_millis(500)); tx.send(Err(())).unwrap(); }); } // 干一些不为人知的事情 thread::sleep(Duration::from_millis(300)); tx.send(Ok(&amp;#34;result&amp;#34;)).unwrap(); }); match rx.recv().unwrap() { // 计时器</description>
    </item>
    
    <item>
      <title>WIP：Pulldown-cmark 分析</title>
      <link>https://gitai.me/2016/07/pulldown/</link>
      <pubDate>Sun, 31 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://gitai.me/2016/07/pulldown/</guid>
      <description>Pulldown-cmark 这是一个对于 CommonMark 的 Pull 解析器，使用 Rust 编写。配带一个简单的终端工具，来渲染 HTML。 设计原则： 快速; 最小的分配和复制 安全; Rust，且未使用 unsafe 块</description>
    </item>
    
  </channel>
</rss>
